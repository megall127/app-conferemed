{"version":3,"sources":["CurrencyInput.tsx"],"names":["React","TextInput","formatNumber","addSignPrefixAndSuffix","forwardRef","props","ref","value","onChangeText","onChangeValue","separator","delimiter","prefix","suffix","precision","maxValue","minValue","signPosition","showPositiveSign","rest","startingWithSign","setStartingWithSign","useState","noNegativeValues","noPositiveValues","formattedValue","useMemo","ignoreNegative","useEffect","handleChangeText","useCallback","text","textWithoutPrefix","replace","slice","textWithoutPrefixAndSufix","suffixRegex","RegExp","test","sign","undefined","isNegativeValue","includes","textNumericValue","numberValue","Number","zerosOnValue","length","newValue","textInputValue","start","Math","max","selection"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,OAAOC,YAAP,IAAuBC,sBAAvB,QAAqD,sBAArD;AAGA,4BAAeH,KAAK,CAACI,UAAN,CAAgD,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC7E,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA,MAAM,GAAG,EANL;AAOJC,IAAAA,MAAM,GAAG,EAPL;AAQJC,IAAAA,SAAS,GAAG,CARR;AASJC,IAAAA,QATI;AAUJC,IAAAA,QAVI;AAWJC,IAAAA,YAAY,GAAG,aAXX;AAYJC,IAAAA,gBAZI;AAaJ,OAAGC;AAbC,MAcFd,KAdJ;AAgBA,QAAM,CAACe,gBAAD,EAAmBC,mBAAnB,IAA0CrB,KAAK,CAACsB,QAAN,EAAhD;AAEA,QAAMC,gBAAgB,GAAG,OAAOP,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,IAAI,CAArE;AACA,QAAMQ,gBAAgB,GAAG,OAAOT,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,IAAI,CAArE;AAEA,QAAMU,cAAc,GAAGzB,KAAK,CAAC0B,OAAN,CAAc,MAAM;AACzC,QAAI,CAAC,CAACnB,KAAF,IAAWA,KAAK,KAAK,CAArB,IAA0BA,KAAK,KAAK,CAAC,CAAzC,EAA4C;AAC1C,aAAOL,YAAY,CAACK,KAAD,EAAQ;AACzBG,QAAAA,SADyB;AAEzBE,QAAAA,MAFyB;AAGzBC,QAAAA,MAHyB;AAIzBC,QAAAA,SAJyB;AAKzBH,QAAAA,SALyB;AAMzBgB,QAAAA,cAAc,EAAEJ,gBANS;AAOzBN,QAAAA,YAPyB;AAQzBC,QAAAA;AARyB,OAAR,CAAnB;AAUD,KAXD,MAWO;AACL,aAAO,EAAP;AACD;AACF,GAfsB,EAepB,CACDX,KADC,EAEDG,SAFC,EAGDE,MAHC,EAIDC,MAJC,EAKDC,SALC,EAMDH,SANC,EAODY,gBAPC,EAQDN,YARC,EASDC,gBATC,CAfoB,CAAvB;AA2BAlB,EAAAA,KAAK,CAAC4B,SAAN,CAAgB,MAAM;AACpBpB,IAAAA,YAAY,IAAIA,YAAY,CAACiB,cAAD,CAA5B;AACD,GAFD,EAEG,CAACA,cAAD,CAFH,EAjD6E,CAmDvD;;AAEtB,QAAMI,gBAAgB,GAAG7B,KAAK,CAAC8B,WAAN,CACtBC,IAAD,IAAkB;AAChB,QAAIC,iBAAiB,GAAGD,IAAxB;;AAEA,QAAInB,MAAJ,EAAY;AACVoB,MAAAA,iBAAiB,GAAGD,IAAI,CAACE,OAAL,CAAarB,MAAb,EAAqB,EAArB,CAApB;;AACA,UAAIoB,iBAAiB,KAAKD,IAA1B,EAAgC;AAC9BC,QAAAA,iBAAiB,GAAGD,IAAI,CAACE,OAAL,CAAarB,MAAM,CAACsB,KAAP,CAAa,CAAb,EAAgB,CAAC,CAAjB,CAAb,EAAkC,EAAlC,CAApB;AACD;AACF;;AAED,QAAIC,yBAAyB,GAAGH,iBAAhC;;AACA,QAAInB,MAAJ,EAAY;AACV,YAAMuB,WAAW,GAAG,IAAIC,MAAJ,WAAcxB,MAAd,gBAA0BA,MAA1B,UAApB;AACAsB,MAAAA,yBAAyB,GAAGH,iBAAiB,CAACC,OAAlB,CAA0BG,WAA1B,EAAuC,EAAvC,CAA5B;;AAEA,UAAID,yBAAyB,KAAKH,iBAAlC,EAAqD;AACnDG,QAAAA,yBAAyB,GAAGH,iBAAiB,CAACC,OAAlB,CAA0BpB,MAAM,CAACqB,KAAP,CAAa,CAAb,CAA1B,EAA2C,EAA3C,CAA5B;AACD;AACF,KAlBe,CAoBhB;;;AACA,QAAI,WAAWI,IAAX,CAAgBP,IAAhB,KAAyB,CAACR,gBAA9B,EAAgD;AAC9CF,MAAAA,mBAAmB,CAAC,GAAD,CAAnB;AACAb,MAAAA,YAAY,IACVA,YAAY,CACVL,sBAAsB,CAACsB,cAAD,EAAiB;AACrCb,QAAAA,MADqC;AAErCC,QAAAA,MAFqC;AAGrC0B,QAAAA,IAAI,EAAE,GAH+B;AAIrCtB,QAAAA;AAJqC,OAAjB,CADZ,CADd;AASA;AACD,KAZD,MAYO,IAAI,aAAaqB,IAAb,CAAkBP,IAAlB,KAA2B,CAACP,gBAAhC,EAAkD;AACvDH,MAAAA,mBAAmB,CAAC,GAAD,CAAnB;AACAb,MAAAA,YAAY,IACVA,YAAY,CACVL,sBAAsB,CAACsB,cAAD,EAAiB;AACrCb,QAAAA,MADqC;AAErCC,QAAAA,MAFqC;AAGrC0B,QAAAA,IAAI,EAAE,GAH+B;AAIrCtB,QAAAA;AAJqC,OAAjB,CADZ,CADd;AASD,KAXM,MAWA;AACLI,MAAAA,mBAAmB,CAACmB,SAAD,CAAnB;AACD;;AAED,UAAMC,eAAe,GAAGN,yBAAyB,CAACO,QAA1B,CAAmC,GAAnC,CAAxB;AAEA,UAAMC,gBAAgB,GAAGR,yBAAyB,CAACF,OAA1B,CAAkC,MAAlC,EAA0C,EAA1C,CAAzB;AAEA,UAAMW,WAAW,GAAGC,MAAM,CAACF,gBAAD,CAAN,IAA4BF,eAAe,GAAG,CAAC,CAAJ,GAAQ,CAAnD,CAApB;AAEA,UAAMK,YAAY,GAAGH,gBAAgB,CAACV,OAAjB,CAAyB,OAAzB,EAAkC,EAAlC,EAAsCc,MAA3D;AAEA,QAAIC,QAAJ;;AAEA,QAAI,CAACL,gBAAD,IAAsB,CAACC,WAAD,IAAgBE,YAAY,KAAKhC,SAA3D,EAAuE;AACrE;AACAkC,MAAAA,QAAQ,GAAG,IAAX;AACD,KAHD,MAGO;AACLA,MAAAA,QAAQ,GAAGJ,WAAW,GAAG,MAAM9B,SAA/B;AACD;;AAED,QAAIkC,QAAQ,IAAIjC,QAAZ,IAAwBiC,QAAQ,GAAGjC,QAAvC,EAAiD;AAC/C;AACD,KAFD,MAEO,IAAIiC,QAAQ,IAAIhC,QAAZ,IAAwBgC,QAAQ,GAAGhC,QAAvC,EAAiD;AACtD;AACD;;AAEDP,IAAAA,aAAa,IAAIA,aAAa,CAACuC,QAAD,CAA9B;AACD,GAzEsB,EA0EvB,CACEnC,MADF,EAEED,MAFF,EAGEW,gBAHF,EAIEC,gBAJF,EAKEV,SALF,EAMEC,QANF,EAOEC,QAPF,EAQEP,aARF,EASED,YATF,EAUEiB,cAVF,EAWER,YAXF,CA1EuB,CAAzB;AAyFA,QAAMgC,cAAc,GAAGjD,KAAK,CAAC0B,OAAN,CAAc,MAAM;AACzC,WAAON,gBAAgB,GACnBjB,sBAAsB,CAACsB,cAAD,EAAiB;AACrCb,MAAAA,MADqC;AAErCC,MAAAA,MAFqC;AAGrC0B,MAAAA,IAAI,EAAEnB,gBAH+B;AAIrCH,MAAAA;AAJqC,KAAjB,CADH,GAOnBQ,cAPJ;AAQD,GATsB,EASpB,CAACA,cAAD,EAAiBb,MAAjB,EAAyBK,YAAzB,EAAuCG,gBAAvC,EAAyDP,MAAzD,CAToB,CAAvB;AAWA,sBACE,oBAAC,SAAD;AACE,IAAA,YAAY,EAAC,SADf;AAEE,IAAA,SAAS,EACPA,MAAM,GACF;AAAEqC,MAAAA,KAAK,EAAEC,IAAI,CAACC,GAAL,CAASH,cAAc,CAACF,MAAf,GAAwBlC,MAAM,CAACkC,MAAxC,EAAgD,CAAhD;AAAT,KADE,GAEF1C,KAFE,aAEFA,KAFE,uBAEFA,KAAK,CAAEgD;AALf,KAOMlC,IAPN;AAQE,IAAA,KAAK,EAAE8B,cART;AASE,IAAA,YAAY,EAAEpB,gBAThB;AAUE,IAAA,GAAG,EAAEvB;AAVP,KADF;AAcD,CAvKc,CAAf","sourcesContent":["import * as React from 'react';\nimport { TextInput } from 'react-native';\n\nimport formatNumber, { addSignPrefixAndSuffix } from './utils/formatNumber';\nimport type { CurrencyInputProps } from './props';\n\nexport default React.forwardRef<TextInput, CurrencyInputProps>((props, ref) => {\n  const {\n    value,\n    onChangeText,\n    onChangeValue,\n    separator,\n    delimiter,\n    prefix = '',\n    suffix = '',\n    precision = 2,\n    maxValue,\n    minValue,\n    signPosition = 'afterPrefix',\n    showPositiveSign,\n    ...rest\n  } = props;\n\n  const [startingWithSign, setStartingWithSign] = React.useState<'-' | '+'>();\n\n  const noNegativeValues = typeof minValue === 'number' && minValue >= 0;\n  const noPositiveValues = typeof maxValue === 'number' && maxValue <= 0;\n\n  const formattedValue = React.useMemo(() => {\n    if (!!value || value === 0 || value === -0) {\n      return formatNumber(value, {\n        separator,\n        prefix,\n        suffix,\n        precision,\n        delimiter,\n        ignoreNegative: noNegativeValues,\n        signPosition,\n        showPositiveSign,\n      });\n    } else {\n      return '';\n    }\n  }, [\n    value,\n    separator,\n    prefix,\n    suffix,\n    precision,\n    delimiter,\n    noNegativeValues,\n    signPosition,\n    showPositiveSign,\n  ]);\n\n  React.useEffect(() => {\n    onChangeText && onChangeText(formattedValue);\n  }, [formattedValue]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleChangeText = React.useCallback(\n    (text: string) => {\n      let textWithoutPrefix = text;\n\n      if (prefix) {\n        textWithoutPrefix = text.replace(prefix, '');\n        if (textWithoutPrefix === text) {\n          textWithoutPrefix = text.replace(prefix.slice(0, -1), '');\n        }\n      }\n\n      let textWithoutPrefixAndSufix = textWithoutPrefix;\n      if (suffix) {\n        const suffixRegex = new RegExp(`${suffix}([^${suffix}]*)$`);\n        textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffixRegex, '');\n\n        if (textWithoutPrefixAndSufix === textWithoutPrefix) {\n          textWithoutPrefixAndSufix = textWithoutPrefix.replace(suffix.slice(1), '');\n        }\n      }\n\n      // Starting with a minus or plus sign\n      if (/^(-|-0)$/.test(text) && !noNegativeValues) {\n        setStartingWithSign('-');\n        onChangeText &&\n          onChangeText(\n            addSignPrefixAndSuffix(formattedValue, {\n              prefix,\n              suffix,\n              sign: '-',\n              signPosition,\n            })\n          );\n        return;\n      } else if (/^(\\+|\\+0)$/.test(text) && !noPositiveValues) {\n        setStartingWithSign('+');\n        onChangeText &&\n          onChangeText(\n            addSignPrefixAndSuffix(formattedValue, {\n              prefix,\n              suffix,\n              sign: '+',\n              signPosition,\n            })\n          );\n      } else {\n        setStartingWithSign(undefined);\n      }\n\n      const isNegativeValue = textWithoutPrefixAndSufix.includes('-');\n\n      const textNumericValue = textWithoutPrefixAndSufix.replace(/\\D+/g, '');\n\n      const numberValue = Number(textNumericValue) * (isNegativeValue ? -1 : 1);\n\n      const zerosOnValue = textNumericValue.replace(/[^0]/g, '').length;\n\n      let newValue: number | null;\n\n      if (!textNumericValue || (!numberValue && zerosOnValue === precision)) {\n        // Allow to clean the value instead of beign 0\n        newValue = null;\n      } else {\n        newValue = numberValue / 10 ** precision;\n      }\n\n      if (newValue && maxValue && newValue > maxValue) {\n        return;\n      } else if (newValue && minValue && newValue < minValue) {\n        return;\n      }\n\n      onChangeValue && onChangeValue(newValue);\n    },\n    [\n      suffix,\n      prefix,\n      noNegativeValues,\n      noPositiveValues,\n      precision,\n      maxValue,\n      minValue,\n      onChangeValue,\n      onChangeText,\n      formattedValue,\n      signPosition,\n    ]\n  );\n\n  const textInputValue = React.useMemo(() => {\n    return startingWithSign\n      ? addSignPrefixAndSuffix(formattedValue, {\n          prefix,\n          suffix,\n          sign: startingWithSign,\n          signPosition,\n        })\n      : formattedValue;\n  }, [formattedValue, prefix, signPosition, startingWithSign, suffix]);\n\n  return (\n    <TextInput\n      keyboardType=\"numeric\"\n      selection={\n        suffix\n          ? { start: Math.max(textInputValue.length - suffix.length, 0) }\n          : props?.selection\n      }\n      {...rest}\n      value={textInputValue}\n      onChangeText={handleChangeText}\n      ref={ref}\n    />\n  );\n});\n"]}